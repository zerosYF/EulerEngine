#version 330 core
out float FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D texNoise;
uniform vec3 samples[64];
uniform mat4 projection;

int kernelSize = 64;
float radius = 1.0;

const vec2 noiseScale = vec2(800.0f/4.0f,600.0f/4.0f);

void main(){
	vec3 FragPos = texture(gPosition,TexCoords).xyz;
	vec3 Normal = normalize(texture(gNormal,TexCoords).rgb);
	vec3 randomVec = normalize(texture(texNoise,TexCoords*noiseScale).xyz);

	vec3 tangent = normalize(randomVec-Normal*dot(randomVec,Normal));
	vec3 bitangent = cross(tangent,tangent);
	mat3 TBN = mat3(tangent,bitangent,Normal);

	float occlusion = 0.0;
	for(int i=0;i<kernelSize;i++){
		vec3 sample = TBN*samples[i];
		sample = FragPos+sample*radius;

		vec4 offset = vec4(sample,1.0);
		offset = projection*offset;
		offset.xyz/=offset.w;
		offset.xyz = offset.xyz*0.5+0.5;

		float sampleDepth = texture(gPosition,offset.xy).z;
		float rangeCheck = smoothstep(0.0,1.0,radius/abs(FragPos.z-sampleDepth));
		occlusion += (sampleDepth>=sample.z?1.0:0.0)*rangeCheck;
	}
	occlusion = 1.0-(occlusion/kernelSize);
	FragColor = occlusion;
}